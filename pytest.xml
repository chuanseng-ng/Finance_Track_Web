<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="46" time="2.084" timestamp="2025-05-12T11:43:18.907867+00:00" hostname="fv-az1770-827"><testcase classname="tests.db_import.test_db_import" name="test_month_name_to_int" time="0.003" /><testcase classname="tests.db_import.test_db_import" name="test_merge_start_date" time="0.001" /><testcase classname="tests.db_import.test_db_import" name="test_merge_end_date" time="0.001" /><testcase classname="tests.db_import.test_db_import" name="test_update_database_from_excel_recurring" time="0.189" /><testcase classname="tests.db_import.test_db_import" name="test_update_database_from_excel_monthly" time="0.032" /><testcase classname="tests.routes.test_admin_routes" name="test_file_not_found" time="0.001" /><testcase classname="tests.routes.test_admin_routes" name="test_login_success" time="0.085" /><testcase classname="tests.routes.test_admin_routes" name="test_login_failure" time="0.021" /><testcase classname="tests.routes.test_admin_routes" name="test_logout" time="0.009" /><testcase classname="tests.routes.test_admin_routes" name="test_dashboard_access" time="0.007" /><testcase classname="tests.routes.test_admin_routes" name="test_dashboard_redirect" time="0.010" /><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_without_login" time="0.010" /><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_missing_params" time="0.007" /><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_db_error" time="0.008" /><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_get_success" time="0.012" /><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_post_success" time="0.007"><failure message="AssertionError: expected call not found.&#10;Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))&#10;  Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Updated Data', '1'))">mock_connect = &lt;MagicMock name='connect' id='139727082428736'&gt;
client = &lt;FlaskClient &lt;Flask 'tests.routes.test_admin_routes'&gt;&gt;

    @patch("sqlite3.connect")
    def test_edit_table_post_success(mock_connect, client):
        """Test edit_table route with a successful POST request."""
        # Mock session.get to always return True
        with client.session_transaction() as sess:
            sess["admin_logged_in"] = True  # Mock session
    
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_connect.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor
    
        response = client.post(
            "/admin/edit_table?year=2023&amp;start_date=2023-01-01&amp;end_date=2023-12-31",
            data={"id": 1, "column": "item", "value": "Updated Data"},
            follow_redirects=True,
        )
        assert response.status_code == 200
        # Remove assertion as post success will not return any special response
        # assert b'"success": true' in response.data
&gt;       mock_cursor.execute.assert_called_once_with(
            "UPDATE expenses SET item = %s WHERE id = %s", ("Updated Data", "1")
        )

tests/routes/test_admin_routes.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/share/miniconda/lib/python3.13/unittest/mock.py:989: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MagicMock name='connect().cursor().execute' id='139727082426048'&gt;
args = ('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))
kwargs = {}
expected = call('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))
actual = call('UPDATE expenses SET item = ? WHERE id = ?', ('Updated Data', '1'))
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7f14bf234540&gt;
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))
E             Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Updated Data', '1'))

/usr/share/miniconda/lib/python3.13/unittest/mock.py:977: AssertionError</failure></testcase><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_post_failure" time="0.008" /><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_post_sqlite_error" time="0.007"><failure message="AssertionError: expected call not found.&#10;Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))&#10;  Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Invalid Data', '1'))">mock_connect = &lt;MagicMock name='connect' id='139727083736096'&gt;
client = &lt;FlaskClient &lt;Flask 'tests.routes.test_admin_routes'&gt;&gt;

    @patch("sqlite3.connect")
    def test_edit_table_post_sqlite_error(mock_connect, client):
        """Test edit_table route when sqlite3.Error occurs during a POST request."""
        # Mock session to simulate a logged-in admin
        with client.session_transaction() as sess:
            sess["admin_logged_in"] = True
    
        # Mock the database connection and cursor
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_connect.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor
    
        # Simulate an sqlite3.Error during the UPDATE query
        mock_cursor.execute.side_effect = sqlite3.Error("Mocked database error")
    
        # Simulate a POST request with valid data
        response = client.post(
            "/admin/edit_table?year=2023&amp;start_date=2023-01-01&amp;end_date=2023-12-31",
            data={"id": 1, "column": "item", "value": "Invalid Data"},
            follow_redirects=True,
        )
    
        # Assert that the response contains the error message
        assert response.status_code == 200
        # Remove assertion as post sqlite error will not return any special response
        # assert b'"success": false' in response.data
        # assert b"Mocked database error" in response.data
    
        # Ensure the UPDATE query was attempted
&gt;       mock_cursor.execute.assert_called_once_with(
            "UPDATE expenses SET item = %s WHERE id = %s", ("Invalid Data", "1")
        )

tests/routes/test_admin_routes.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/share/miniconda/lib/python3.13/unittest/mock.py:989: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;MagicMock name='connect().cursor().execute' id='139727083147280'&gt;
args = ('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))
kwargs = {}
expected = call('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))
actual = call('UPDATE expenses SET item = ? WHERE id = ?', ('Invalid Data', '1'))
_error_message = &lt;function NonCallableMock.assert_called_with.&lt;locals&gt;._error_message at 0x7f14bf1e7ba0&gt;
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
&gt;           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))
E             Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Invalid Data', '1'))

/usr/share/miniconda/lib/python3.13/unittest/mock.py:977: AssertionError</failure></testcase><testcase classname="tests.routes.test_admin_routes" name="test_edit_table_post_invalid_column" time="0.007" /><testcase classname="tests.routes.test_expense_routes" name="test_add_expense_success" time="0.006" /><testcase classname="tests.routes.test_expense_routes" name="test_add_expense_error" time="0.004" /><testcase classname="tests.routes.test_index_routes" name="test_index_success" time="0.008" /><testcase classname="tests.routes.test_index_routes" name="test_index_error" time="0.007" /><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_get" time="0.006" /><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_post_success" time="0.064" /><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_post_missing_data" time="0.008" /><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_post_exception" time="0.006" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_expenditure_success" time="0.085" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_custom_expenditure_success" time="0.009" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_expenditure_error" time="0.005" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_custom_expenditure_missing_params" time="0.003" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_custom_expenditure_error" time="0.004" /><testcase classname="tests.routes.test_recurring_routes" name="test_add_recurring_success" time="0.005" /><testcase classname="tests.routes.test_recurring_routes" name="test_add_recurring_error" time="0.004" /><testcase classname="tests.routes.test_recurring_routes" name="test_add_recurring_missing_end_date" time="0.004" /><testcase classname="tests.routes.test_salary_routes" name="test_add_salary_success" time="0.005" /><testcase classname="tests.routes.test_salary_routes" name="test_add_salary_with_previous_entry" time="0.005" /><testcase classname="tests.routes.test_salary_routes" name="test_add_salary_error" time="0.003" /><testcase classname="tests.setup.test_setup_db" name="test_get_db_creates_tables" time="0.002" /><testcase classname="tests.setup.test_setup_stg" name="test_cfg_setup_with_valid_api_key" time="0.001" /><testcase classname="tests.setup.test_setup_stg" name="test_cfg_setup_with_missing_api_key_and_error_bypass" time="0.001" /><testcase classname="tests.setup.test_setup_stg" name="test_cfg_setup_with_missing_api_key_and_no_error_bypass" time="0.002" /><testcase classname="tests.test_main" name="test_register_blueprints_called" time="0.004" /><testcase classname="tests.test_main" name="test_debug_mode_enabled" time="0.001" /><testcase classname="tests.test_main" name="test_debug_mode_disabled" time="0.001" /><testcase classname="tests.test_main" name="test_app_secret_key" time="0.006" /></testsuite></testsuites>