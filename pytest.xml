<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="2" skipped="0" tests="31" time="2.546" timestamp="2025-04-05T08:24:22.659257+00:00" hostname="fv-az1914-328"><testcase classname="tests.db_import.test_db_import" name="test_month_name_to_int" time="0.024" /><testcase classname="tests.db_import.test_db_import" name="test_merge_start_date" time="0.001" /><testcase classname="tests.db_import.test_db_import" name="test_merge_end_date" time="0.001" /><testcase classname="tests.db_import.test_db_import" name="test_update_database_from_excel_recurring" time="0.217" /><testcase classname="tests.db_import.test_db_import" name="test_update_database_from_excel_monthly" time="0.030" /><testcase classname="tests.routes.test_expense_routes" name="test_add_expense_success" time="0.011" /><testcase classname="tests.routes.test_expense_routes" name="test_add_expense_error" time="0.060" /><testcase classname="tests.routes.test_index_routes" name="test_index_success" time="0.021"><failure message="assert 500 == 200&#10; +  where 500 = &lt;WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]&gt;.status_code">mock_get_db = &lt;MagicMock name='get_db' id='139679078027424'&gt;
client = &lt;FlaskClient &lt;Flask 'tests.routes.test_index_routes'&gt;&gt;

    @patch("routes.index_routes.get_db")
    # pylint: disable=redefined-outer-name
    def test_index_success(mock_get_db, client):
        """Test successful rendering of the index page."""
        # Mock database connection and cursor
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_get_db.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor
    
        # Mock database queries
        mock_cursor.fetchone.side_effect = [
            (100.0,),  # Monthly spending
            (50.0,),  # Recurring expenses
            (200.0,),  # Monthly salary
        ]
    
        # Send GET request
        response = client.get("/")
    
        # Assertions
&gt;       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = &lt;WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]&gt;.status_code

tests/routes/test_index_routes.py:40: AssertionError</failure></testcase><testcase classname="tests.routes.test_index_routes" name="test_index_error" time="0.004" /><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_get" time="0.004" /><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_post_success" time="0.127"><failure message="assert 500 == 200&#10; +  where 500 = &lt;WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]&gt;.status_code">mock_update_database = &lt;MagicMock name='update_database_from_excel' id='139679076966208'&gt;
client = &lt;FlaskClient &lt;Flask 'tests.routes.test_index_routes'&gt;&gt;

    @patch("routes.index_routes.update_database_from_excel")
    # pylint: disable=redefined-outer-name
    def test_upload_excel_post_success(mock_update_database, client):
        """Test the POST request to the /upload_excel route with valid data."""
        # Mock the update_database_from_excel function
        mock_update_database.return_value = None
    
        # Send POST request with valid data
        response = client.post(
            "/upload_excel",
            data={"excel_path": "mock_file.xlsx", "year": "2023"},
            follow_redirects=True,
        )
    
        # Assertions
&gt;       assert response.status_code == 200
E       assert 500 == 200
E        +  where 500 = &lt;WrapperTestResponse streamed [500 INTERNAL SERVER ERROR]&gt;.status_code

tests/routes/test_index_routes.py:87: AssertionError</failure></testcase><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_post_missing_data" time="0.005" /><testcase classname="tests.routes.test_index_routes" name="test_upload_excel_post_exception" time="0.004" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_expenditure_success" time="0.070" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_custom_expenditure_success" time="0.010" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_expenditure_error" time="0.005" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_custom_expenditure_missing_params" time="0.003" /><testcase classname="tests.routes.test_plot_routes" name="test_plot_custom_expenditure_error" time="0.004" /><testcase classname="tests.routes.test_recurring_routes" name="test_add_recurring_success" time="0.005" /><testcase classname="tests.routes.test_recurring_routes" name="test_add_recurring_error" time="0.004" /><testcase classname="tests.routes.test_recurring_routes" name="test_add_recurring_missing_end_date" time="0.005" /><testcase classname="tests.routes.test_salary_routes" name="test_add_salary_success" time="0.005" /><testcase classname="tests.routes.test_salary_routes" name="test_add_salary_with_previous_entry" time="0.005" /><testcase classname="tests.routes.test_salary_routes" name="test_add_salary_error" time="0.004" /><testcase classname="tests.setup.test_setup_db" name="test_get_db_creates_tables" time="0.003" /><testcase classname="tests.setup.test_setup_stg" name="test_cfg_setup_with_valid_api_key" time="0.001" /><testcase classname="tests.setup.test_setup_stg" name="test_cfg_setup_with_missing_api_key_and_error_bypass" time="0.001" /><testcase classname="tests.setup.test_setup_stg" name="test_cfg_setup_with_missing_api_key_and_no_error_bypass" time="0.002" /><testcase classname="tests.test_main" name="test_register_blueprints_called" time="0.004" /><testcase classname="tests.test_main" name="test_debug_mode_enabled" time="0.001" /><testcase classname="tests.test_main" name="test_debug_mode_disabled" time="0.001" /></testsuite></testsuites>