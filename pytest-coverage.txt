============================= test session starts ==============================
platform linux -- Python 3.13.2, pytest-8.3.4, pluggy-1.5.0 -- /usr/share/miniconda/bin/python
cachedir: .pytest_cache
rootdir: /home/runner/work/Finance_Track_Web/Finance_Track_Web
configfile: pyproject.toml
plugins: cov-6.0.0
collecting ... collected 46 items

tests/db_import/test_db_import.py::test_month_name_to_int PASSED         [  2%]
tests/db_import/test_db_import.py::test_merge_start_date PASSED          [  4%]
tests/db_import/test_db_import.py::test_merge_end_date PASSED            [  6%]
tests/db_import/test_db_import.py::test_update_database_from_excel_recurring PASSED [  8%]
tests/db_import/test_db_import.py::test_update_database_from_excel_monthly PASSED [ 10%]
tests/routes/test_admin_routes.py::test_file_not_found PASSED            [ 13%]
tests/routes/test_admin_routes.py::test_login_success PASSED             [ 15%]
tests/routes/test_admin_routes.py::test_login_failure PASSED             [ 17%]
tests/routes/test_admin_routes.py::test_logout PASSED                    [ 19%]
tests/routes/test_admin_routes.py::test_dashboard_access PASSED          [ 21%]
tests/routes/test_admin_routes.py::test_dashboard_redirect PASSED        [ 23%]
tests/routes/test_admin_routes.py::test_edit_table_without_login PASSED  [ 26%]
tests/routes/test_admin_routes.py::test_edit_table_missing_params PASSED [ 28%]
tests/routes/test_admin_routes.py::test_edit_table_db_error PASSED       [ 30%]
tests/routes/test_admin_routes.py::test_edit_table_get_success PASSED    [ 32%]
tests/routes/test_admin_routes.py::test_edit_table_post_success FAILED   [ 34%]
tests/routes/test_admin_routes.py::test_edit_table_post_failure PASSED   [ 36%]
tests/routes/test_admin_routes.py::test_edit_table_post_sqlite_error FAILED [ 39%]
tests/routes/test_admin_routes.py::test_edit_table_post_invalid_column PASSED [ 41%]
tests/routes/test_expense_routes.py::test_add_expense_success PASSED     [ 43%]
tests/routes/test_expense_routes.py::test_add_expense_error PASSED       [ 45%]
tests/routes/test_index_routes.py::test_index_success PASSED             [ 47%]
tests/routes/test_index_routes.py::test_index_error PASSED               [ 50%]
tests/routes/test_index_routes.py::test_upload_excel_get PASSED          [ 52%]
tests/routes/test_index_routes.py::test_upload_excel_post_success PASSED [ 54%]
tests/routes/test_index_routes.py::test_upload_excel_post_missing_data PASSED [ 56%]
tests/routes/test_index_routes.py::test_upload_excel_post_exception PASSED [ 58%]
tests/routes/test_plot_routes.py::test_plot_expenditure_success PASSED   [ 60%]
tests/routes/test_plot_routes.py::test_plot_custom_expenditure_success PASSED [ 63%]
tests/routes/test_plot_routes.py::test_plot_expenditure_error PASSED     [ 65%]
tests/routes/test_plot_routes.py::test_plot_custom_expenditure_missing_params PASSED [ 67%]
tests/routes/test_plot_routes.py::test_plot_custom_expenditure_error PASSED [ 69%]
tests/routes/test_recurring_routes.py::test_add_recurring_success PASSED [ 71%]
tests/routes/test_recurring_routes.py::test_add_recurring_error PASSED   [ 73%]
tests/routes/test_recurring_routes.py::test_add_recurring_missing_end_date PASSED [ 76%]
tests/routes/test_salary_routes.py::test_add_salary_success PASSED       [ 78%]
tests/routes/test_salary_routes.py::test_add_salary_with_previous_entry PASSED [ 80%]
tests/routes/test_salary_routes.py::test_add_salary_error PASSED         [ 82%]
tests/setup/test_setup_db.py::test_get_db_creates_tables PASSED          [ 84%]
tests/setup/test_setup_stg.py::test_cfg_setup_with_valid_api_key PASSED  [ 86%]
tests/setup/test_setup_stg.py::test_cfg_setup_with_missing_api_key_and_error_bypass PASSED [ 89%]
tests/setup/test_setup_stg.py::test_cfg_setup_with_missing_api_key_and_no_error_bypass PASSED [ 91%]
tests/test_main.py::test_register_blueprints_called PASSED               [ 93%]
tests/test_main.py::test_debug_mode_enabled PASSED                       [ 95%]
tests/test_main.py::test_debug_mode_disabled PASSED                      [ 97%]
tests/test_main.py::test_app_secret_key PASSED                           [100%]

=================================== FAILURES ===================================
_________________________ test_edit_table_post_success _________________________

mock_connect = <MagicMock name='connect' id='139727082428736'>
client = <FlaskClient <Flask 'tests.routes.test_admin_routes'>>

    @patch("sqlite3.connect")
    def test_edit_table_post_success(mock_connect, client):
        """Test edit_table route with a successful POST request."""
        # Mock session.get to always return True
        with client.session_transaction() as sess:
            sess["admin_logged_in"] = True  # Mock session
    
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_connect.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor
    
        response = client.post(
            "/admin/edit_table?year=2023&start_date=2023-01-01&end_date=2023-12-31",
            data={"id": 1, "column": "item", "value": "Updated Data"},
            follow_redirects=True,
        )
        assert response.status_code == 200
        # Remove assertion as post success will not return any special response
        # assert b'"success": true' in response.data
>       mock_cursor.execute.assert_called_once_with(
            "UPDATE expenses SET item = %s WHERE id = %s", ("Updated Data", "1")
        )

tests/routes/test_admin_routes.py:186: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/share/miniconda/lib/python3.13/unittest/mock.py:989: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='connect().cursor().execute' id='139727082426048'>
args = ('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))
kwargs = {}
expected = call('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))
actual = call('UPDATE expenses SET item = ? WHERE id = ?', ('Updated Data', '1'))
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f14bf234540>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))
E             Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Updated Data', '1'))

/usr/share/miniconda/lib/python3.13/unittest/mock.py:977: AssertionError
______________________ test_edit_table_post_sqlite_error _______________________

mock_connect = <MagicMock name='connect' id='139727083736096'>
client = <FlaskClient <Flask 'tests.routes.test_admin_routes'>>

    @patch("sqlite3.connect")
    def test_edit_table_post_sqlite_error(mock_connect, client):
        """Test edit_table route when sqlite3.Error occurs during a POST request."""
        # Mock session to simulate a logged-in admin
        with client.session_transaction() as sess:
            sess["admin_logged_in"] = True
    
        # Mock the database connection and cursor
        mock_conn = MagicMock()
        mock_cursor = MagicMock()
        mock_connect.return_value = mock_conn
        mock_conn.cursor.return_value = mock_cursor
    
        # Simulate an sqlite3.Error during the UPDATE query
        mock_cursor.execute.side_effect = sqlite3.Error("Mocked database error")
    
        # Simulate a POST request with valid data
        response = client.post(
            "/admin/edit_table?year=2023&start_date=2023-01-01&end_date=2023-12-31",
            data={"id": 1, "column": "item", "value": "Invalid Data"},
            follow_redirects=True,
        )
    
        # Assert that the response contains the error message
        assert response.status_code == 200
        # Remove assertion as post sqlite error will not return any special response
        # assert b'"success": false' in response.data
        # assert b"Mocked database error" in response.data
    
        # Ensure the UPDATE query was attempted
>       mock_cursor.execute.assert_called_once_with(
            "UPDATE expenses SET item = %s WHERE id = %s", ("Invalid Data", "1")
        )

tests/routes/test_admin_routes.py:247: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/share/miniconda/lib/python3.13/unittest/mock.py:989: in assert_called_once_with
    return self.assert_called_with(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <MagicMock name='connect().cursor().execute' id='139727083147280'>
args = ('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))
kwargs = {}
expected = call('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))
actual = call('UPDATE expenses SET item = ? WHERE id = ?', ('Invalid Data', '1'))
_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f14bf1e7ba0>
cause = None

    def assert_called_with(self, /, *args, **kwargs):
        """assert that the last call was made with the specified arguments.
    
        Raises an AssertionError if the args and keyword args passed in are
        different to the last call to the mock."""
        if self.call_args is None:
            expected = self._format_mock_call_signature(args, kwargs)
            actual = 'not called.'
            error_message = ('expected call not found.\nExpected: %s\n  Actual: %s'
                    % (expected, actual))
            raise AssertionError(error_message)
    
        def _error_message():
            msg = self._format_mock_failure_message(args, kwargs)
            return msg
        expected = self._call_matcher(_Call((args, kwargs), two=True))
        actual = self._call_matcher(self.call_args)
        if actual != expected:
            cause = expected if isinstance(expected, Exception) else None
>           raise AssertionError(_error_message()) from cause
E           AssertionError: expected call not found.
E           Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))
E             Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Invalid Data', '1'))

/usr/share/miniconda/lib/python3.13/unittest/mock.py:977: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    tests.routes.test_admin_routes:admin_routes.py:105 Database error: Mocked database error
- generated xml file: /home/runner/work/Finance_Track_Web/Finance_Track_Web/pytest.xml -

---------- coverage: platform linux, python 3.13.2-final-0 -----------
Name    Stmts   Miss  Cover   Missing
-------------------------------------
TOTAL     892      0   100%

27 files skipped due to complete coverage.

=========================== short test summary info ============================
FAILED tests/routes/test_admin_routes.py::test_edit_table_post_success - AssertionError: expected call not found.
Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Updated Data', '1'))
  Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Updated Data', '1'))
FAILED tests/routes/test_admin_routes.py::test_edit_table_post_sqlite_error - AssertionError: expected call not found.
Expected: execute('UPDATE expenses SET item = %s WHERE id = %s', ('Invalid Data', '1'))
  Actual: execute('UPDATE expenses SET item = ? WHERE id = ?', ('Invalid Data', '1'))
========================= 2 failed, 44 passed in 2.08s =========================
